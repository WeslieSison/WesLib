import hou
matnet = hou.node("/mat")
selects = hou.selectedNodes()
shaders = []
for select in selects:
    if select.type().name()=="pyropostprocess":

        #Get Parameters
        pp_bind_density = select.parm("bind_density").eval()
        pp_bind_temperature = select.parm("bind_temperature").eval()
        pp_bind_flame = select.parm("bind_flame").eval()
        pp_density_scale = select.parm("s_densityscale").eval()
        pp_smoke_color = select.parmTuple("s_color").eval()
        pp_fire_int = select.parm("fi_int").eval()
        pp_flame_range_min = select.parm("fi_fitsrcmin").eval()
        pp_flame_range_max = select.parm("fi_fitsrcmax").eval()
        pp_flame_ramp = select.parm("fi_ramp").evalAsRamp()
        pp_fc_mode = select.parm("fc_colormode").eval()
        pp_temp_scale = select.parm("fc_int").eval()
        pp_temp_range_min = select.parm("fc_rampmin").eval()
        pp_temp_range_max = select.parm("fc_rampmax").eval()
        pp_fc_ramp = select.parmTuple("fc_colorramp").evalAsRamps()
        pp_fc_bbkelvin = select.parm("fc_bbtemp").eval()
        pp_fc_mode = select.parm("fc_colormode").evalAsString()

        #Create Basic Shader Nodes
        shader = matnet.createNode("arnold_materialbuilder", "ar_"+select.name())
        shaders.append(shader)
        out = shader.children()[0]
        volume = out.createInputNode(2,"standard_volume")

        #Create Nodes
        flame_mult = volume.createInputNode(5,"arnold::multiply","Emission_Intensity")
        flame_ramp = flame_mult.createInputNode(0,"ramp_float","flame_ramp")
        tem_ramp = volume.createInputNode(6,"ramp_rgb","temperature_ramp")
        temperature_sample = tem_ramp.createInputNode(0,"volume_sample_float", "temperature_sample")
        flame_sample = flame_ramp.createInputNode(0,"volume_sample_float", "flame_sample")

        #Set Parameters
        volume.setParms({"density": pp_density_scale ,"density_channel": pp_bind_density, "emission_channel": ""})
        volume.setParms({"temperature": pp_temp_scale, "temperature_channel": pp_bind_temperature ,"blackbody_kelvin": pp_fc_bbkelvin})
        volume.parmTuple("scatter_color").set(pp_smoke_color)
        
        fm_input2r = flame_mult.parm("input2r")
        flame_mult.setParms({"input2r": pp_fire_int, "input2g": fm_input2r, "input2b": fm_input2r})

        temperature_sample.setParms({"channel": pp_bind_temperature})
        

        flame_sample.setParms({"channel": pp_bind_flame, "input_min": pp_flame_range_min, "input_max": pp_flame_range_max})
        flame_ramp.setParms({"ramp": pp_flame_ramp})

        if pp_fc_mode == "ramp":
            volume.setParms({"emission_mode": "channel"})
            temperature_sample.setParms({"input_min": pp_temp_range_min, "input_max": pp_temp_range_max})
            tem_ramp.parmTuple("ramp").set(pp_fc_ramp)
        if pp_fc_mode == "physical":
            volume.setParms({"emission_mode": "blackbody"})


        shader.layoutChildren()

        #Create Material Node and assign
        mat = select.createOutputNode("material")
        mat.parm("shop_materialpath1").set(shader.path())
    
    
    
        matnet.layoutChildren(shaders)
    
    
    else:
        hou.ui.displayMessage("ÇëÑ¡ÔñPyro Post Process½Úµã")