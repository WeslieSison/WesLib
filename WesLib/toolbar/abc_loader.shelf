<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="abc_laoder" label="ABC Loader" icon="hicon:/SVGIcons.index?SOP_alembic.svg">
    <script scriptType="python"><![CDATA[import hou
import os

#Create Nodes for each abc files
abc_files = hou.ui.selectFile( 
    title = "Select Alembic" , 
    file_type = hou.fileType.Geometry, 
    multiple_select = True, 
    pattern = "*.abc"
)
abc_list = abc_files.split(" ; ")
geo_nodes = []
for abc_path in abc_list:
    abc_name = os.path.splitext(abc_path)[0]
    abc_name = abc_name.split("/")[-1]

    geo = hou.node("/obj").createNode("geo", abc_name)
    geo_nodes.append(geo)
    alembic = geo.createNode("alembic", "Import_"+abc_name)
    alembic.parm("fileName").set(abc_path)

    unpack = alembic.createOutputNode("unpack")
    unpack.setParms({"transfer_attributes":"*", "transfer_groups":"*"})
    unpack.createOutputNode("convert").createOutputNode("null","OUT_Unpack")

    out = alembic.createOutputNode("null","OUT_Pack")
    out.setRenderFlag(True)
    out.setDisplayFlag(True)
    
    geo.layoutChildren()


#configure Global Scale
sels = hou.selectedNodes()
if len(sels) != 0 and sels[-1].type().category().label() == "Objects" and sels[-1].type().name() == "null":
    scale = sels[-1]
else:
    scale = hou.node("/obj").createNode("null","Global_Scale")
    scale.setParms({"scale":0.1})
    scale.setDisplayFlag(False)

#connect geo_node to null
for geo_node in geo_nodes:
    geo_node.setInput(0,scale)

#layout nodes
geo_nodes.append(scale)
hou.node("/obj").layoutChildren(geo_nodes)
]]></script>
  </tool>
</shelfDocument>
