<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="Arnold DEEP" label="Arnold DEEP" icon="hicon:/SVGIcons.index?COP2_zcomp.svg">
    <script scriptType="python"><![CDATA[import hou

outnet = hou.node("/out")
nodes = hou.selectedNodes()

for node in nodes:
    if node.type().name()=="arnold":

        #create node and set name
        ori_name = node.name()
        ar_deepexr = outnet.createNode("arnold", ori_name+"_DEEP")


        #syn the parm group
        ori_parms = node.parmTemplateGroup()
        ar_deepexr.setParmTemplateGroup(ori_parms)
        
        #set_position
        ori_pos = node.position()
        offset = hou.Vector2(4,0)
        ar_deepexr.setPosition(ori_pos + offset)
        
        #set_initial_parms
        ar_deepexr.setParms({"alights":"" , "ar_picture":""})
        ar_deepexr.setParms({"ar_AA_samples":2 , "ar_GI_diffuse_samples":0 , "ar_GI_specular_samples":0 })
        ar_deepexr.setParms({"ar_GI_transmission_samples":0 , "ar_GI_sss_samples":0 , "ar_GI_volume_samples":0 })
        ar_deepexr.setParms({"ar_GI_total_depth": 0})
        ar_deepexr.setParms({"ar_picture_format":"deepexr" })
        ar_deepexr.setParms({"ar_deepexr_beauty_half_precision":1, "ar_deepexr_alpha_half_precision":1, "ar_deepexr_depth_half_precision":1})
        
        #set_output_path
        ori_output_path = node.parm("ar_picture").unexpandedString()
        ar_deepexr.parm("ar_picture").set(ori_output_path)

        #set_relative_parms
        ar_deepexr.setParms({ "camera":node.parm("camera"), "trange":node.parm('trange') })
        ar_deepexr.setParms({ "ar_AA_samples": node.parm("ar_AA_samples") })
        ar_deepexr.parmTuple("f").set(node.parmTuple("f"))
                
        ar_deepexr.setParms({"ar_mb_xform_enable": node.parm("ar_mb_xform_enable") , "ar_mb_xform_keys": node.parm("ar_mb_xform_keys") })
        ar_deepexr.setParms({"ar_mb_dform_enable": node.parm("ar_mb_dform_enable") , "ar_mb_dform_keys": node.parm("ar_mb_dform_keys") })
        ar_deepexr.setParms({"ar_mb_shutter": node.parm("ar_mb_shutter") , "ar_mb_shutter_length": node.parm("ar_mb_shutter_length") })
        
        ar_deepexr.setParms({"forceobject":node.parm("forceobject"), "vobject":node.parm("vobject") })
        ar_deepexr.setParms({"excludeobject":node.parm("excludeobject"), "phantom_objects":node.parm("phantom_objects") })

        ori_ver = node.parm("ver")
        if ori_ver == None:
            pass
        else:
            ar_deepexr.parm("ver").setExpression("ch('"+ori_ver.path()+"')")

    
    else:
        hou.ui.displayMessage("è¯·éæ©Arnoldèç¹")
        
]]></script>
  </tool>
</shelfDocument>
