<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="ass_to_abc" label="ASS to ABC" icon="hicon:/SVGIcons.index?SOP_unpack.svg">
    <script scriptType="python"><![CDATA[import hou
import os

sels = hou.selectedNodes()
sels_root = sels[0].parent()

context = sels_root.createOutputNode("geo","ENV_Convert")

context.moveToGoodPosition()

alembic_nodes = []
for sel in sels:
    if sel.type().name() == "arnold_procedural":

        #Create Alambic Node
        file_path = sel.parm("ar_filename").eval()
        file_path = file_path.replace(".ass", ".abc")
        alembic = context.createNode("alembic",sel.name())
        alembic.setParms({"fileName": file_path})

        #Assign Xform
        trans   = sel.parmTuple("t")
        rot     = sel.parmTuple("r")
        scale   = sel.parmTuple("s")

        xform = alembic.createOutputNode("xform")
        xform.parmTuple("t").set(trans, None, True)
        xform.parmTuple("r").set(rot, None, True)
        xform.parmTuple("s").set(scale, None, True)
        

        group = xform.createOutputNode("groupcreate","group_"+sel.name())
        group.setParms({"groupname":sel.name()})
        alembic_nodes.append(group)
    
merge = context.createNode("merge")
for node in alembic_nodes:
    merge.setNextInput(node)

unpack = merge.createOutputNode("unpack")
unpack.setParms({"transfer_attributes":"*", "transfer_groups":"*"})
unpack.createOutputNode("convert").createOutputNode("null","OUT_Unpack")

out = merge.createOutputNode("null","OUT_Pack")
out.setRenderFlag(True)
out.setDisplayFlag(True)

context.layoutChildren()
]]></script>
  </tool>
</shelfDocument>
