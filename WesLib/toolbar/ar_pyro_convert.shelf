<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="Ar_Pyro_Shader" label="AR Pyro Shader" icon="hicon:/SVGIcons.index?SHELF_convert_to_fire.svg">
    <script scriptType="python"><![CDATA[import hou
from weslie import wes_Utils as wesutil

node = hou.selectedNodes()[-1]

#Build Volume Shader
matnet = hou.node(str("%s/matnet"%node.path()))
mat_builder = matnet.createNode("arnold_materialbuilder","Pyro_Shader_Arnold")
mat_builder.moveToGoodPosition()
volume_standard = mat_builder.createNode("arnold::standard_volume")
hou.node(str("%s/OUT_material"%mat_builder.path())).setInput(2,volume_standard)

color_correct1 = volume_standard.createInputNode(2,"arnold::color_correct")
color_correct1.setParms({"gamma":2.2})
color_correct1.createInputNode(0,"arnold::flat","smoke_color").parmTuple("color").set(node.parmTuple("smokecolor"))

switch_to_ce = volume_standard.createInputNode(6,"arnold::switch_rgba")
switch_to_ce.parm("index").set(node.parm("baketoce"))
add1 = switch_to_ce.createInputNode(1,"arnold::add")

#Build Fire Nodes
fire_k = add1.createInputNode(0,"arnold::multiply","fire_k")
mult_fire = fire_k.createInputNode(0,"arnold::multiply","mult_fire")
fire_color_ramp = mult_fire.createInputNode(0,"arnold::ramp_rgb","fire_color_ramp")
fire_k_ramp = mult_fire.createInputNode(1,"arnold::ramp_float","fire_k_ramp")
color_volume = fire_color_ramp.createInputNode(0,"arnold::volume_sample_float","color_volume")
intensity_volume = fire_k_ramp.createInputNode(0,"arnold::volume_sample_float","intensity_volume")

#Build Scatter Nodes
mult_scatter = add1.createInputNode(1,"arnold::multiply")
scatter_volume = mult_scatter.createInputNode(0,"arnold::volume_sample_rgb","scatter_volume")
scatter_mult_volume = mult_scatter.createInputNode(1,"arnold::volume_sample_float","scatter_mult_volume")

ce_volume = switch_to_ce.createInputNode(2,"arnold::volume_sample_rgb","ce_volume")
mat_builder.layoutChildren()

#Set Standard Volume constant parameter
volume_standard.setParms({"emission_mode":"1","emission":0.5,"emission_channel":""})

#Link Density Parms
density_parm_dict = {
    "densityscale":"density",
    "smoke_volumename":"density_channel",
    "diffuse_volumename":"scatter_color_channel"
}
wesutil.linkParms(node,volume_standard,density_parm_dict)
volume_standard.parm("transparentr").setExpression(str("0.3678*ch('%s')"%node.parm("shadowcolorr").path()))
volume_standard.parm("transparentg").setExpression("ch('transparentr')")
volume_standard.parm("transparentb").setExpression("ch('transparentr')")

#Link Fire Parms
intensity_volume.parm("channel").set(node.parm("firek_volumename"))
intensity_volume.parm("input_min").set(node.parm("firekrangex"))
intensity_volume.parm("input_max").set(node.parm("firekrangey"))

color_volume.parm("channel").set(node.parm("firecolor_volumename"))
color_volume.parm("input_min").set(node.parm("firecolorrangex"))
color_volume.parm("input_max").set(node.parm("firecolorrangey"))

fire_k.parm("input2r").setExpression(str("ch('%s')*ch('%s')"%(node.parm("kfire").path(),node.parm("enablefire").path())))
fire_k.parm("input2g").setExpression("ch('input2r')")
fire_k.parm("input2b").setExpression("ch('input2r')")

from pyro2 import xferLinkParm
xferLinkParm(node.parm("firekramp"),fire_k_ramp.parm("ramp"),True)
xferLinkParm(node.parm("firecolorramp"),fire_color_ramp.parm("ramp"),True)


#Link Scatter Parms
scatter_volume.parm("channel").set(node.parm("scatter_volumename"))
scatter_volume.parm("multiply").setExpression(str("ch('%s')*ch('%s')"%(node.parm("kscatter").path(),node.parm("enablescatter").path())))
scatter_mult_volume.parm("channel").set(node.parm("scattermask_volumename"))

#Link Ce Parms
ce_volume.parm("channel").set(node.parm("ce_volumename"))
]]></script>
  </tool>
</shelfDocument>
